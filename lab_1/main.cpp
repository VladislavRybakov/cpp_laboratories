#include <iostream> //стандартная библиотека
#include <string> // библиотека для строк
#include <fstream>  // библиотека для работы с файлами
#include <ctime> // библиотека для работы с временем
#include "citizen.h" // подключение заголовочного файла с объявлением класса и прототипами функций
using namespace std; // использование пространства имен

#define TICK(X) clock_t X = clock() // в переменную Х кладем начальное время
#define TOCK(X) printf("Time: %g sec.\n", (double)(clock() - (X)) / CLOCKS_PER_SEC) // выводим разницу между настоящим и засеченным временем в переменной Х (g - кратчайшее представление чисел с плавающей точкой)

int main()
{
  Citizen* one = new Citizen[10000]; // выделяем память для массива на 10000 элементов
  createMass(one); // функция заполнения массива данными из файла
  int n, ch;  // переменные для количества сортируемых элементов и для выбора алгоритма сортировки
  cout << "Enter number of lines: ";
  cin >> n;
  cout << "Choose sort method:\n(1) Insert sort\n(2) Sheker sort\nYour choice: "; // вывод меню
  cin >> ch;
  switch (ch) { 
  case 1: // случай выбора сортировки вставками
    cout << "\nTime of 6 different datasets:\n";
    for (int i = 0; i < 6; i++) { // сделаем сортировку для 6 разных наборов данных по n элементов в каждом
      if (i * n + n < 10000) { // проверяем, что мы не выйдем за рамки массива
        cout << i + 1 << " dataset "; // порядковый номер датасета
        TICK(Time); // засекаем время
        insert_sort(one, i * n, n); // запускаем сортировку. i*n - начальный элемент сортируемого массива, то есть мы сортируем первые n элементов, потом следующие n элементов и так далее
        //таким образом мы делаем сортировку разных наборов данных, используя одну большую таблицу
        TOCK(Time); // выводим затраченное время на экран
      }
    }
    break;
  case 2: // случай выбора шейкер-сортировки
    cout << "\nTime of 6 different datasets:\n";
    for (int i = 0; i < 6; i++) {
      if (i * n + n < 10000) { // проверяем, что мы не выйдем за рамки массива
        cout << i << " dataset ";
        TICK(Time); // запускаем время
        sheker_sort(one, i * n, n); // запускаем сортировку. i*n - начальный элемент сортируемого массива, то есть мы сортируем первые n элементов, потом следующие n элементов и так далее
        //таким образом мы делаем сортировку разных наборов данных, используя одну большую таблицу
        TOCK(Time); // выводим время
      }
    }
    break;
  }
  delete [] one; // обязательно очищаем память после выделения памяти
}